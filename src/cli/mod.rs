use clap::{Parser, Subcommand};

// CLI for Fasta Processing
#[derive(Parser)]
#[command(author="Damon-Lee Pointon (DLBPointon)", version="v1.0.0", about = "A simple program for playing with GitHub Issues both On and Offline", long_about = None)]
pub struct Cli {
    // command is optional (TODO: Make this not optional)
    // Reference: https://docs.rs/clap/latest/clap/_derive/_tutorial/chapter_2/index.html#defaults
    #[command(subcommand)]
    pub command: Option<Commands>,
}

// Reference: https://docs.rs/clap/latest/clap/_derive/_tutorial/chapter_2/index.html
#[derive(Subcommand)]
pub enum Commands {
    View {
        // Path to the TreeVal yaml file generated by the user
        #[arg(
            short = 'c',
            long,
            default_value = "/Users/dp24/Documents/ogit/etc/config.toml"
        )]
        config_file: String,

        // Print explainers as to why validation fails, if it does fail
        #[arg(short = 'r', long = "repo", default_value = ".git/config")]
        repo: String,

        // THIS SHOULD HAVE A DEFAULT OF 20
        #[arg(
            short = 't',
            long = "terminal_length",
            default_value_t = 40,
            value_parser = clap::value_parser!(u16).range(11..100)
        )]
        // Clap value parser stops values smaller than "ISSUE TITLE"
        // which is the column header in the output.
        // Going smaller than the header causes alignment issue which
        // is a pain to try and fix
        terminal_length: u16,

        // Default git config for current dir
        #[arg(short = 'o', long = "overide_repo", default_value = "-NA-")]
        repo_override: String,

        // Cache flag
        // mutually exclusive with from_cache
        #[arg(
            long = "cache_issues",
            default_value_t = false,
            help = "Cache issues for project under .git/issue_cache.json. NOTE: this will always overwrite existing file."
        )]
        cache_issues: bool,

        #[arg(long = "from_cache", default_value_t = false)]
        from_cache: bool,

        #[arg(long = "debug", default_value_t = false)]
        debug: bool,
    },
    Info {
        #[arg(
            short = 'i',
            long = "issue_number",
            required = true,
            help = "The issue number of the issue you want to know more about"
        )]
        issue_number: u16,

        #[arg(long = "comments", help = "Get comments", default_value_t = false)]
        comments: bool,

        #[arg(
            long = "debug",
            help = "Print some debug information",
            default_value_t = false
        )]
        debug: bool,

        #[arg(long = "from_cache", default_value_t = false)]
        from_cache: bool,

        // Path to the TreeVal yaml file generated by the user
        #[arg(
            short = 'c',
            long,
            default_value = "/Users/dp24/Documents/ogit/etc/config.toml"
        )]
        config_file: String,

        // Print explainers as to why validation fails, if it does fail
        #[arg(short = 'r', long = "repo", default_value = ".git/config")]
        repo: String,

        // Default git config for current dir
        #[arg(short = 'o', long = "overide_repo", default_value = "-NA-")]
        repo_override: String,
    },
}
